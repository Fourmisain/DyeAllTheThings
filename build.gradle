plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

class DeletingFileVisitor extends SimpleFileVisitor<Path> {
	@Override
	FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {
		Files.delete(path);
		return FileVisitResult.CONTINUE;
	}

	@Override
	FileVisitResult postVisitDirectory(Path directory, IOException ioException) throws IOException {
		Files.delete(directory);
		return FileVisitResult.CONTINUE;
	}
}

version = project.mod_version + '-' + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	accessWidenerPath = file("src/main/resources/dyeallthethings.accesswidener")
}

repositories {
	repositories {
		maven {
			url = "https://cursemaven.com"
			content {
				includeGroup "curse.maven"
			}
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

processResources {
	// expand all properties from gradle.properties
	def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
	inputs.properties stringProperties

	filesMatching(['fabric.mod.json', '*.mixins.json']) {
		expand(stringProperties) {
			escapeBackslash = true
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.compilerArgs.add('-Xlint:deprecation')
	it.options.release = project.java_version as Integer
}

java {
	targetCompatibility = sourceCompatibility = project.java_version as Integer
	withSourcesJar()
}

jar {
	inputs.property 'archivesName', project.base.archivesName

	from('LICENSE') {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

tasks.register('removeHeaders') {
	doLast {
		// delete "header files" from jar
		var jar = remapJar.archiveFile.get().asFile.toPath()
		if (Files.exists(jar)) {
			var jarFileUri = new URI('jar:file', jar.toUri().getSchemeSpecificPart(), jar.toUri().getFragment())

			def del = (FileSystem fs, String pkg) -> {
				def path = fs.getPath(pkg)
				if (Files.exists(path)) Files.walkFileTree(path, new DeletingFileVisitor());
			}

			try (FileSystem fs = FileSystems.newFileSystem(jarFileUri, ['create': 'false'])) {
				del(fs, 'immersive_armors')
				del(fs, 'nourl')
			}
		}
	}
}

build.finalizedBy removeHeaders

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
