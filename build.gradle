plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

class DeletingFileVisitor extends SimpleFileVisitor<Path> {
	@Override
	FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {
		Files.delete(path);
		return FileVisitResult.CONTINUE;
	}

	@Override
	FileVisitResult postVisitDirectory(Path directory, IOException ioException) throws IOException {
		Files.delete(directory);
		return FileVisitResult.CONTINUE;
	}
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	repositories {
		maven {
			url "https://cursemaven.com"
			content {
				includeGroup "curse.maven"
			}
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modCompileOnly "curse.maven:betteranimalsplus-303557:${project.betteranimalsplus_version}"
	modCompileOnly "curse.maven:trinkets-341284:${project.trinkets_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 8
}

java {
	targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

task finalize {
	doLast {
		// delete "header files" from jar
		var jar = file("build/libs/${project.archives_base_name}-${project.version}.jar").toPath()
		if (Files.exists(jar)) {
			var jarFileUri = new URI('jar:file', jar.toUri().getSchemeSpecificPart(), jar.toUri().getFragment())

			try (FileSystem fs = FileSystems.newFileSystem(jarFileUri, ['create': 'false'])) {
				Files.walkFileTree(fs.getPath("immersive_armors"), new DeletingFileVisitor());
				Files.walkFileTree(fs.getPath("nourl"), new DeletingFileVisitor());
			}
		}
	}
}

build.finalizedBy(finalize)

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
